@inject IProductServiceInterface ProductService
@implements IDisposable

@if(ProductService.Products == null || ProductService.Products.Count == 0)
{
    <span>@ProductService.Message</span>      
}
else
{
    <div class="propage">
        <div class="productsbody">
            @foreach (var product in ProductService.Products.OrderByDescending(s => s.Price))
            {
                <a href="product/@product.ProId">
                <div class="productbox">
                    <div class="boxname">
                        <h4>@product.Name</h4>
                    </div>
                    <div class="boximg">
                        <img src="@product.ImageUrl">
                    </div>
                    <div class="boxprice">
                        <p>@product.Price.ToString("N2", CultureInfo.CreateSpecificCulture("en-US")) Kč</p>
                    </div>
                </div>
                </a>
            }
        </div>
    </div>
}

@code {
    protected override void OnInitialized()
    {
        ProductService.ProductChanged += StateHasChanged;
    }
    public void Dispose()
    {
        ProductService.ProductChanged -= StateHasChanged;
    }
}